{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["query","gql","Lamp","lampUrl","data","shapeProps","isSelected","onSelect","onChange","products","edges","node","images","originalSrc","useImage","image","crossOrigin","SameSite","Secure","shapeRef","React","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","Fragment","fill","onTap","onClick","ref","draggable","onDragEnd","e","x","target","y","onTransformEnd","scaleX","scaleY","width","Math","max","height","boundBoxFunc","oldBox","newBox","PictureCollage","useQuery","imageUploader","canvasStage","createRef","lampCanvas","backgroundCanvas","newImage","Image","useState","setImage","selected","setSelected","shape","setShape","window","innerWidth","innerHeight","htmlFor","className","style","border","display","padding","cursor","id","visibility","type","accept","canvas","ctx","getContext","onload","drawImage","file","files","reader","FileReader","readAsDataURL","clearRect","src","result","class","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","downloadURI","toDataURL","mimeType","Boolean","location","hostname","match","cache","InMemoryCache","httpLink","HttpLink","middlewareLink","setContext","headers","client","ApolloClient","concat","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c2a2f24.chunk.js","sourcesContent":["import React from 'react';\nimport useImage from 'use-image';\nimport { Stage, Layer, Transformer, Image as KonvaImage } from 'react-konva';\n// import lamp from './lamp.png';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst query = gql`\n  query query {\n    products(first: 1, query: \"title:'Ecoled Blade One'\") {\n      edges {\n        node {\n          id\n          title\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst Lamp = ({ data, shapeProps, isSelected, onSelect, onChange }) => {\n  let lampUrl;\n  if (data) {\n    lampUrl = data.products.edges[0].node.images.edges[0].node.originalSrc;\n  }\n  const [image] = useImage(lampUrl);\n  if (image) {\n    image.crossOrigin = 'Anonymous';\n    image.SameSite = 'None';\n    image.Secure = true;\n  }\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <KonvaImage\n        crossOrigin\n        fill=\"\"\n        image={image}\n        onTap={onSelect}\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst PictureCollage = () => {\n  const { data } = useQuery(query);\n  const imageUploader = React.useRef(null);\n  const canvasStage = React.createRef();\n  const lampCanvas = React.useRef();\n  const backgroundCanvas = React.useRef();\n\n  let newImage = new Image();\n\n  const [image, setImage] = React.useState(null);\n  const [selected, setSelected] = React.useState(false);\n  const [shape, setShape] = React.useState({\n    x: 10,\n    y: 10,\n    width: 200,\n    height: 320,\n  });\n\n  const handleImageUpload = e => {\n    setSelected(false);\n    let canvas = backgroundCanvas.current;\n    let ctx = canvas.getContext('2d');\n    newImage.onload = function() {\n      newImage.crossOrigin = 'Anonymus';\n      setImage(newImage);\n      ctx.drawImage(newImage, 0, 0);\n    };\n\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = e => {\n        ctx.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);\n        newImage.src = e.target.result;\n      };\n    }\n  };\n\n  function downloadURI(uri, name) {\n    var link = document.createElement('a');\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const saveImage = () => {\n    let canvasStageSave = canvasStage.current;\n    const canvasStageData = canvasStageSave.toDataURL({\n      mimeType: 'image/png',\n    });\n    downloadURI(canvasStageData, 'stage.png');\n  };\n\n  return (\n    <div>\n      <Stage\n        ref={canvasStage}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      >\n        <Layer\n          ref={backgroundCanvas}\n          onClick={() => {\n            setSelected(false);\n          }}\n          onTap={() => {\n            setSelected(false);\n          }}\n        >\n          <KonvaImage image={image} />\n        </Layer>\n        <Layer ref={lampCanvas}>\n          <Lamp\n            data={data}\n            shapeProps={shape}\n            isSelected={selected}\n            onSelect={() => {\n              setSelected(true);\n            }}\n            onChange={setShape}\n          />\n        </Layer>\n      </Stage>\n      <label\n        htmlFor=\"files\"\n        className=\"btn\"\n        style={{\n          border: '1px solid',\n          display: 'inline block',\n          padding: '6px 12px',\n          cursor: 'pointer',\n        }}\n      >\n        Bild hochladen\n        <input\n          id=\"files\"\n          visibility=\"hidden\"\n          type=\"file\"\n          accept=\"image/*\"\n          style={{ display: 'none' }}\n          onChange={handleImageUpload}\n          ref={imageUploader}\n        />\n      </label>\n      <label\n        class=\"btn\"\n        style={{\n          border: '1px solid',\n          display: 'inline block',\n          padding: '6px 12px',\n          cursor: 'pointer',\n        }}\n        onClick={saveImage}\n      >\n        Bild speichern\n      </label>\n    </div>\n  );\n};\n\nexport default PictureCollage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PictureCollage from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: 'https://picture-collage-development-store.myshopify.com/api/graphql',\n});\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '6ffce0a3460c1eac5a62e776d6d292bb',\n  },\n}));\n\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <PictureCollage />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}