{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["query","gql","useStyles","makeStyles","outerContainer","height","display","stageContainerBeforeUpload","stageContainerAfterUpload","width","alignContent","alignItems","buttonContainerAfterUpload","position","bottom","justifyContent","buttonContainerBeforeUpload","singleButtonContainerBeforeUpload","singleButtonContainerAfterUpload","button","background","fontFamily","fontStyle","color","border","fontWeight","textTransform","cursor","borderRadius","padding","textAlign","alignSelf","buttonLabel","buttonBeforeUpload","Lamp","lampUrl","data","shapeProps","isSelected","onSelect","onChange","products","edges","node","images","originalSrc","useImage","image","shapeRef","React","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","Fragment","crossOrigin","fill","onTap","onClick","ref","draggable","onDragEnd","e","x","target","y","onTransformEnd","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","PictureCollage","classes","useQuery","canvasStage","createRef","newImage","Image","useState","backgroundImage","setBackgroundImage","setImage","selected","setSelected","window","innerHeight","setInnerHeight","innerWidth","setInnerWidth","shape","setShape","onorientationchange","orientationInnerHeight","orientationInnerWidth","scaledImage","loadImage","maxWidth","maxHeight","console","log","offsetY","backgroundImageUpload","className","visible","htmlFor","id","visibility","type","accept","style","file","files","img","orientation","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","downloadURI","toDataURL","mimeType","Boolean","location","hostname","match","cache","InMemoryCache","httpLink","HttpLink","middlewareLink","setContext","headers","client","ApolloClient","concat","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5652f720.chunk.js","sourcesContent":["import React from 'react';\nimport useImage from 'use-image';\nimport { Stage, Layer, Transformer, Image as KonvaImage } from 'react-konva';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport * as loadImage from 'blueimp-load-image';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport DeviceOrientation, { Orientation } from 'react-screen-orientation';\n\nconst query = gql`\n  query query {\n    products(first: 1, query: \"title:'Ecoled Blade One'\") {\n      edges {\n        node {\n          id\n          title\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  outerContainer: {\n    height: '100vh',\n    display: 'flex',\n  },\n  stageContainerBeforeUpload: {},\n  stageContainerAfterUpload: {\n    width: '100%',\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainerAfterUpload: {\n    width: '100%',\n    position: 'absolute',\n    bottom: 0,\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n  buttonContainerBeforeUpload: {\n    width: '100%',\n  },\n  singleButtonContainerBeforeUpload: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  singleButtonContainerAfterUpload: {\n    width: '48%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    background: '#252a2b',\n    fontFamily: 'Work Sans',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    textAlign: 'center',\n    width: '100%',\n    alignSelf: 'stretch',\n  },\n  buttonLabel: {\n    width: '100%',\n  },\n  buttonBeforeUpload: {\n    background: '#252a2b',\n    fontFamily: 'Work Sans',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    width: '50%',\n    display: 'flex',\n    alignSelf: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst Lamp = ({ data, shapeProps, isSelected, onSelect, onChange }) => {\n  let lampUrl;\n  if (data) {\n    lampUrl = data.products.edges[0].node.images.edges[0].node.originalSrc;\n  }\n  const [image] = useImage(lampUrl, 'Anonymous');\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return (\n    <React.Fragment>\n      <KonvaImage\n        crossOrigin=\"anonymus\"\n        fill=\"\"\n        image={image}\n        onTap={onSelect}\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst PictureCollage = () => {\n  const classes = useStyles();\n  const { data } = useQuery(query);\n  const canvasStage = React.createRef();\n\n  let newImage = new Image();\n\n  const [backgroundImage, setBackgroundImage] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n  const [selected, setSelected] = React.useState(false);\n  const [innerHeight, setInnerHeight] = React.useState(window.innerHeight);\n  const [innerWidth, setInnerWidth] = React.useState(window.innerWidth);\n  const [shape, setShape] = React.useState(null);\n\n  React.useEffect(() => {\n    window.onorientationchange = function() {\n      const orientationInnerHeight = innerHeight;\n      const orientationInnerWidth = innerWidth;\n      if (backgroundImage) {\n        const scaledImage = loadImage.scale(backgroundImage, {\n          maxWidth: orientationInnerHeight,\n          maxHeight: orientationInnerWidth,\n        });\n        console.log(scaledImage);\n\n        setImage(scaledImage);\n        let offsetX = orientationInnerHeight - scaledImage.width;\n        let x = offsetX / 2;\n        let offsetY = orientationInnerWidth - scaledImage.height;\n        let y = offsetY / 2;\n        setShape({ x: x, y: y, width: 150, height: 240 });\n      }\n      setInnerHeight(orientationInnerWidth);\n      setInnerWidth(orientationInnerHeight);\n    };\n  }, [backgroundImage, newImage]);\n\n  let backgroundImageUpload = false;\n  if (backgroundImage !== null) {\n    backgroundImageUpload = true;\n  }\n\n  const handleImageUpload = e => {\n    const [file] = e.target.files;\n    if (file) {\n      loadImage(\n        file,\n        img => {\n          const scaledImage = loadImage.scale(img, {\n            maxWidth: innerWidth,\n            maxHeight: innerHeight,\n          });\n          console.log(scaledImage);\n          setImage(scaledImage);\n          setBackgroundImage(img);\n        },\n        { orientation: true }\n      );\n    }\n  };\n\n  function downloadURI(uri, name) {\n    var link = document.createElement('a');\n    link.download = name;\n    link.href = uri;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const saveImage = () => {\n    let canvasStageSave = canvasStage.current;\n    const canvasStageData = canvasStageSave.toDataURL({\n      mimeType: 'image/png',\n    });\n    downloadURI(canvasStageData, 'collage.png');\n  };\n\n  let x;\n  let y;\n  if (image) {\n    if (image.width < innerWidth) {\n      let offsetX = innerWidth - image.width;\n      x = offsetX / 2;\n    }\n    if (image.height < innerHeight) {\n      let offsetY = innerHeight - image.height;\n      y = offsetY / 2;\n    }\n    if (shape === null) {\n      setShape({ x: x, y: y, width: 150, height: 240 });\n    }\n  }\n\n  return (\n    <div className={classes.outerContainer}>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.stageContainerAfterUpload\n            : classes.stageContainerBeforeUpload\n        }\n      >\n        <Stage\n          visible={backgroundImageUpload}\n          ref={canvasStage}\n          width={innerWidth}\n          height={innerHeight}\n        >\n          <Layer\n            onClick={() => {\n              setSelected(false);\n            }}\n            onTap={() => {\n              setSelected(false);\n            }}\n          >\n            <KonvaImage x={x} y={y} image={image} />\n          </Layer>\n          <Layer visible={backgroundImageUpload}>\n            <Lamp\n              data={data}\n              shapeProps={shape}\n              isSelected={selected}\n              onSelect={() => {\n                setSelected(true);\n              }}\n              onChange={setShape}\n            />\n          </Layer>\n        </Stage>\n      </div>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.buttonContainerAfterUpload\n            : classes.buttonContainerBeforeUpload\n        }\n      >\n        <div\n          className={\n            backgroundImageUpload\n              ? classes.singleButtonContainerAfterUpload\n              : classes.singleButtonContainerBeforeUpload\n          }\n        >\n          <label\n            className={\n              backgroundImageUpload\n                ? classes.button\n                : classes.buttonBeforeUpload\n            }\n            htmlFor=\"files\"\n          >\n            Bild hochladen\n            <input\n              id=\"files\"\n              visibility=\"hidden\"\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              onChange={handleImageUpload}\n            />\n          </label>\n        </div>\n        <div\n          style={\n            backgroundImageUpload\n              ? { visibility: 'visible' }\n              : { visibility: 'hidden' }\n          }\n          className={classes.singleButtonContainerAfterUpload}\n        >\n          <label className={classes.button} onClick={saveImage}>\n            Bild Speichern\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PictureCollage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PictureCollage from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: 'https://picture-collage-development-store.myshopify.com/api/graphql',\n});\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '6ffce0a3460c1eac5a62e776d6d292bb',\n  },\n}));\n\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <PictureCollage />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}