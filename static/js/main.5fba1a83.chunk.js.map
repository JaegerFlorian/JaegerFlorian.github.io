{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["query","gql","useStyles","makeStyles","outerContainer","height","display","stageContainerBeforeUpload","stageContainerAfterUpload","width","alignContent","alignItems","buttonContainerAfterUpload","position","bottom","justifyContent","buttonContainerBeforeUpload","singleButtonContainerBeforeUpload","singleButtonContainerAfterUpload","button","background","fontFamily","fontStyle","color","border","fontWeight","textTransform","cursor","borderRadius","padding","textAlign","alignSelf","buttonLabel","buttonBeforeUpload","Lamp","data","shapeProps","isSelected","onSelect","onChange","React","useState","lampUrl","setLampUrl","products","edges","node","images","forEach","product","altText","originalSrc","useImage","image","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","Fragment","crossOrigin","fill","onTap","onClick","ref","draggable","onDragEnd","e","x","target","y","onTransformEnd","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","PictureCollage","classes","useQuery","canvasStage","createRef","newImage","Image","backgroundImage","setBackgroundImage","setImage","selected","setSelected","window","innerHeight","setInnerHeight","innerWidth","setInnerWidth","shape","setShape","currentOrientation","setCurrentOrientation","offset","setOffset","changeOrientation","matchMedia","matches","orientationInnerHeight","orientationInnerWidth","scaledImage","loadImage","maxWidth","maxHeight","onorientationchange","this","setTimeout","backgroundImageUpload","className","visible","htmlFor","id","visibility","type","accept","style","file","files","img","orientation","canvasStageData","toDataURL","mimeType","saveAs","Boolean","location","hostname","match","cache","InMemoryCache","httpLink","HttpLink","uri","middlewareLink","setContext","headers","client","ApolloClient","link","concat","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fba1a83.chunk.js","sourcesContent":["import React from 'react';\nimport useImage from 'use-image';\nimport { Stage, Layer, Transformer, Image as KonvaImage } from 'react-konva';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport * as loadImage from 'blueimp-load-image';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { saveAs } from 'file-saver';\n\nconst SHAPE_DEFAULT_WIDTH = 150;\nconst SHAPE_DEFAULT_HEIGHT = 240;\n\nconst query = gql`\n  query query {\n    products(first: 1, query: \"title:'Ecoled Blade One'\") {\n      edges {\n        node {\n          id\n          title\n          images(first: 10) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  outerContainer: {\n    height: '100vh',\n    display: 'flex',\n  },\n  stageContainerBeforeUpload: {},\n  stageContainerAfterUpload: {\n    width: '100%',\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainerAfterUpload: {\n    width: '100%',\n    position: 'absolute',\n    bottom: 0,\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n  buttonContainerBeforeUpload: {\n    width: '100%',\n  },\n  singleButtonContainerBeforeUpload: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  singleButtonContainerAfterUpload: {\n    width: '48%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    background: '#252a2b',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    textAlign: 'center',\n    width: '100%',\n    alignSelf: 'stretch',\n  },\n  buttonLabel: {\n    width: '100%',\n  },\n  buttonBeforeUpload: {\n    background: '#252a2b',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    width: '50%',\n    display: 'flex',\n    alignSelf: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst Lamp = ({ data, shapeProps, isSelected, onSelect, onChange }) => {\n  const [lampUrl, setLampUrl] = React.useState(null);\n\n  if (data && lampUrl === null) {\n    data.products.edges[0].node.images.edges.forEach(product => {\n      if (product.node.altText === 'collage') {\n        setLampUrl(product.node.originalSrc);\n      }\n    });\n  }\n  const [image] = useImage(lampUrl, 'Anonymous');\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <KonvaImage\n        crossOrigin=\"anonymus\"\n        fill=\"\"\n        image={image}\n        onTap={onSelect}\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst PictureCollage = () => {\n  const classes = useStyles();\n  const { data } = useQuery(query);\n  const canvasStage = React.createRef();\n\n  let newImage = new Image();\n\n  const [backgroundImage, setBackgroundImage] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n  const [selected, setSelected] = React.useState(false);\n  const [innerHeight, setInnerHeight] = React.useState(window.innerHeight);\n  const [innerWidth, setInnerWidth] = React.useState(window.innerWidth);\n  const [shape, setShape] = React.useState(null);\n  const [currentOrientation, setCurrentOrientation] = React.useState(null);\n  const [offset, setOffset] = React.useState(null);\n\n  function changeOrientation() {\n    //Gets the current orientation before the phone rotates, so true means that the phone will be in landscape\n    const orientation = window.matchMedia('(orientation: portrait)');\n    if (orientation.matches === true) {\n      setCurrentOrientation('landscape');\n    } else {\n      setCurrentOrientation('portrait');\n    }\n    const orientationInnerHeight = innerHeight;\n    const orientationInnerWidth = innerWidth;\n    if (backgroundImage) {\n      const scaledImage = loadImage.scale(backgroundImage, {\n        maxWidth: orientationInnerHeight,\n        maxHeight: orientationInnerWidth,\n      });\n\n      setImage(scaledImage);\n      let offsetX = orientationInnerHeight - scaledImage.width;\n      let x = offsetX / 2;\n      let offsetY = orientationInnerWidth - scaledImage.height;\n      let y = offsetY / 2;\n      setOffset({ x: x, y: y });\n      setShape({\n        x: x,\n        y: y,\n        width: SHAPE_DEFAULT_WIDTH,\n        height: SHAPE_DEFAULT_HEIGHT,\n      });\n    }\n\n    setInnerHeight(orientationInnerWidth);\n    setInnerWidth(orientationInnerHeight);\n  }\n\n  React.useEffect(() => {\n    window.onorientationchange = function() {\n      changeOrientation();\n      this.setTimeout(() => {\n        if (this.window.innerHeight !== innerHeight) {\n          changeOrientation();\n        }\n      }, 400);\n    };\n  }, [backgroundImage, newImage]);\n\n  let backgroundImageUpload = false;\n  if (backgroundImage !== null) {\n    backgroundImageUpload = true;\n  }\n\n  const handleImageUpload = e => {\n    const [file] = e.target.files;\n    if (file) {\n      loadImage(\n        file,\n        img => {\n          const scaledImage = loadImage.scale(img, {\n            maxWidth: innerWidth,\n            maxHeight: innerHeight,\n          });\n          setImage(scaledImage);\n          setBackgroundImage(img);\n          let x;\n          let y;\n          if (scaledImage.width < innerWidth) {\n            let offsetX = innerWidth - scaledImage.width;\n            x = offsetX / 2;\n          }\n          if (scaledImage.height < innerHeight) {\n            let offsetY = innerHeight - scaledImage.height;\n            y = offsetY / 2;\n          }\n          setOffset({ x: x, y: y });\n          if (shape === null) {\n            setShape({\n              x: x,\n              y: y,\n              width: SHAPE_DEFAULT_WIDTH,\n              height: SHAPE_DEFAULT_HEIGHT,\n            });\n          }\n        },\n        { orientation: true }\n      );\n    }\n  };\n\n  const saveImage = () => {\n    setSelected(false);\n    let canvasStageSave = canvasStage.current;\n    const canvasStageData = canvasStageSave.toDataURL({\n      mimeType: 'image/png',\n    });\n    saveAs(canvasStageData, 'collage.png');\n  };\n\n  if (window.matchMedia(`(orientation: ${currentOrientation} )`) === false) {\n    changeOrientation();\n  }\n\n  return (\n    <div className={classes.outerContainer}>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.stageContainerAfterUpload\n            : classes.stageContainerBeforeUpload\n        }\n      >\n        <Stage\n          visible={backgroundImageUpload}\n          ref={canvasStage}\n          width={innerWidth}\n          height={innerHeight}\n        >\n          <Layer\n            onClick={() => {\n              setSelected(false);\n            }}\n            onTap={() => {\n              setSelected(false);\n            }}\n          >\n            <KonvaImage\n              x={shape ? offset.x : 0}\n              y={shape ? offset.y : 0}\n              image={image}\n            />\n          </Layer>\n          <Layer visible={backgroundImageUpload}>\n            <Lamp\n              data={data}\n              shapeProps={shape}\n              isSelected={selected}\n              onSelect={() => {\n                setSelected(true);\n              }}\n              onChange={setShape}\n            />\n          </Layer>\n        </Stage>\n      </div>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.buttonContainerAfterUpload\n            : classes.buttonContainerBeforeUpload\n        }\n      >\n        <div\n          className={\n            backgroundImageUpload\n              ? classes.singleButtonContainerAfterUpload\n              : classes.singleButtonContainerBeforeUpload\n          }\n        >\n          <label\n            className={\n              backgroundImageUpload\n                ? classes.button\n                : classes.buttonBeforeUpload\n            }\n            htmlFor=\"files\"\n          >\n            Bild hochladen\n            <input\n              id=\"files\"\n              visibility=\"hidden\"\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              onChange={handleImageUpload}\n            />\n          </label>\n        </div>\n        <div\n          style={\n            backgroundImageUpload\n              ? { visibility: 'visible' }\n              : { visibility: 'hidden' }\n          }\n          className={classes.singleButtonContainerAfterUpload}\n        >\n          <label className={classes.button} onClick={saveImage}>\n            Bild Speichern\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PictureCollage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PictureCollage from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: 'https://picture-collage-development-store.myshopify.com/api/graphql',\n});\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': '6ffce0a3460c1eac5a62e776d6d292bb',\n  },\n}));\n\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <PictureCollage />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}